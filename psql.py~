from query import *
import psycopg2
from faker import Faker
import random

fake = Faker()
 
user_credentials = {'host':'localhost',
               'database':'db_fakertest',
               'user':'postgres',
               'password':'cloudly1'}
value_provider={"character":fake.pystr(max_chars=5) ,"character varying":fake.pystr(max_chars=5) ,
		"integer":fake.random_number() ,"date":fake.date(pattern="%Y-%m-%d") ,
		"interval":fake.time(pattern="%H:%M:%S"),
		"smallint":fake.random_digit() ,
		"boolean":random.choice([True, False]),
		"timestamp without time zone":fake.date_time_ad()  ,
		"bytea":random.choice([0,1,10]),
		"text":fake.random_letter() ,
		"numeric":fake.random_number()
		}


try:
	conn=psycopg2.connect(**user_credentials)
	cursor = conn.cursor()
	print "connected successfully"
except:
	print "unable to connect"



def find_table(cur):
	"""Listing all the tables from the database """
	
	cur.execute("select relname from pg_class where relkind='r' and relname !~ '^(pg_|sql_)';")
	return  [table[0] for table in  cur.fetchall()]

all_tables=find_table(cursor)

print "All tables in targated Database"
print all_tables

def constraint_finder(tables,cur):
	"""finding the constraints of all the tables in db"""
	for table in tables:
		cur.execute("truncate %s cascade;"%table)
		cur.execute(query_for_constraint % table)
		constraint_dic={}
		
		for i in cur.fetchall():
			constraint_dic[i[0]] = str(i[1])
		yield constraint_dic
		print constraint_dic


def insert_tupel(tables,cur,conn,constraint,value_dic,n):
	#to disable all triggers;
	try:
		cur.execute("SET session_replication_role = replica;")
		cur.execute("SET session_replication_role = DEFAULT;")
	except:
		print "problem disable trigger"
	for table in tables:#go through each table
		try:
			cur.execute("ALTER TABLE %s DISABLE TRIGGER %s"%(table,user))
			print "trigger successfully turn off"
		except:
			pass
		cur.execute(query_form_datatypes % table)
		column_names= [value[0] for value in cur.fetchall()]

		cur.execute(query_form_datatypes % table)
		column_datatypes=[value[1] for value in cur.fetchall()]
		print column_datatypes
		constraint_dic=constraint.next()
		def place_holder(num_col):
			value_tuple=()
			for i in range (num_col):
				value_tuple += ('%s',)
			return str(tuple(value_tuple))

		value_holder_tuple=place_holder(len(column_names))
		for i in range (n):
			value_list=[]
			for column in column_names:
			
				if column in constraint_dic:
					if constraint_dic[str(column)] == 'FOREIGN KEY' or (constraint_dic[str(column)] == 'PRIMARY KEY') or (constraint_dic[str(column)] == 'UNIQUE'):
						value_list.append(i)
				else :
					
					try:
						value_list.append(value_provider[column_datatypes[column_names.index(column)]])
					except:

						value_list.append('NULL')
			query = ("INSERT INTO %s VALUES " % (table) + value_holder_tuple)
			cur.execute(query % tuple(value_list))
			conn.commit()
		#conn.close()		 	
			  			
constraint_finder(all_tables,cursor)

#insert_tupel(all_tables,cursor,conn,constraint_finder(all_tables,cursor),value_provider,5)
